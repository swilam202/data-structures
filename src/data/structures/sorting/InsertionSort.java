/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package data.structures.sorting;

/**
 *
 * @author Swilam
 */
public class InsertionSort {
    /*
    الخوارمية دي بتشتغل ب انها تفرض ان اول عنصر مترتب
    وبعد كده تمسك كل العناصر الي علي اليمين وتمشي عليهم واحد واحد 
    تمسك تاني عنصر في الليستة عشان قولنا ان الاول مرتب
    وبعد كده تشوف العنصر التاني ده اكبر من ولا اصغر من العنصر الاولاني الي هو المرتب
    لو اكبر من العنصر المرتب يسيبه مكانه لو اصغر منه يبدل الاتنين سوا
    بعد كده يمشي علي العنصر التالت ويفضل يرتبه ما بين اول عنصرين الي بقوا مترتبين خلاص 
    ويعد يبدل العنصر التالت ده مع التاني والاول
    لحد اما يلاقي ان الي علي شماله اصغر منه والي علي يمينه اكبر منه
    وهكذا مع باقي العناصر لاخر الليست
    
    space complexity: O(1) عشان بنشتغل علي نفس الليستة
    worst case time complexity: O(n^2) عشان بنلف علي عناصر الليستة كلها بنعد نقارنها بين باقي الليستة
    best case time complexity: O(n) دي لو كانت الليستة مترتبة ف هيعدي مرة واحدة علي كله عشان يتاكد ان كله مترتب
    inplace algorithm
    */
   void insertion_sort(int[] arr){
       //هنلف علي كل العناصر بداية من المكان التاني
       //لان نا قولنا العنصر الاول مترتب اصلا
        for(int i = 1;i < arr.length;i++){
            
            //هيخزن قيمة العنصر الي محتاج يترتب هنا عشان نبقي نعمل تبديل
            int key = arr[i];
            
            //هنمل المتغير ده عشان نلف علي الليستة الي علي الشمال
            //خليناه يلف علي كل العناصر الي قبل العنصر الي محتاج يترتب
            //باعتبار ان الي علي الشمال كله مترتب
            int j = i -1;
            
            //هنا هنفضل نلف علي الجزء الي مترتب علي الشمال
            //ونقضل ماشيين طالما موصلش لاول عنصر في الليستة
            //واذا كان العنصر الي عليه الدور يترتب اصغر من اللي قبله نبدل
            //ولو اكبر مش هنعمل حاجة لان العنصر كده في مكانه خلاص
            while(j >= 0 && arr[j] > key){
                
                //هنا هناخد قيمة العنصر الي محتاج يترتب
                //ونخط بداله العنصر الي قبله
                //علي اعتبار ان الي علي شماله اكبر منه ف محتاج يترتب
                arr[j+1] = arr[j];
                
                //ونقص المتغير عشان نروح للي قبله
                j--;
                
            }
            //وبعد اما يفضل ماشي في الليستة لحد ما العنصر يكون اترتب خلاص
            //يخلي العنصر الي لسا متبدلش يساوي الي كان عايز يترتب
            arr[j+1] = key;

        }
    }
}
